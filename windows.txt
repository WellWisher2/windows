1) Sort a given set of n integer elements using Selection Sort method and compute its time
complexity. Run the program for varied values of n&gt;5000 and record the time taken to sort.
Plot a graph of the time taken versus n. The elements can be read from a file or can be
generated using the random number generator. Demonstrate using C++/Java how the brute
force method works along with its time complexity analysis: worst case, average case and
best case.
-----------------------------------------------------------------------------------------------------
Program:-
import java.util.Scanner;
import java.util.Random;
import java.io.*;

public class SelectionSort {

    /**
     * @param args the command line arguments
     */
    static int size; // To read size of input elements
    public static void main(String[] args) throws IOException
    {
       
      Scanner in = new Scanner(System.in);
      System.out.println("Enter the number of elements to sorted: ( >5000):");
      size =  in.nextInt();
      //Declare an array of dimension 'size'
      int inputArr [] = new int[size];
      genRandomNumbers(inputArr);
      //Sort the randomly generated numbers for best case, average case and worst case complexity
      long startTime = System.nanoTime();
      selection(inputArr,size-1);
      long estimatedTime = System.nanoTime() - startTime;
      PrintWriter outA = new PrintWriter(new File("ssort.txt"));
      for(int i=0;i<inputArr.length;i++)
      {
        outA.println(inputArr[i]);
      }
      outA.close();
      System.out.println("The time complexity for best,average and worst case is " + (estimatedTime/1000000.0)+ " ms");
    }
  // Method for random number generation	
  public static void genRandomNumbers(int inputArr[]) throws IOException
  {
      int  number, count=0;
      Random rand = new Random();
      PrintWriter out = new PrintWriter(new File("Mrandom.txt"));
      while(count<size)
     {
		  number=rand.nextInt(size)+1;
		  out.println(number);
		  out.print(" ");
		  inputArr[count]=number;
                    count++;
       }
     out.close();
     System.out.println("The total numbers generated: " + count );
   }
  // Method to 	
    public static void selection(int a[],int n)
    {
		for(int i=0; i<=n;i++)
		{
			int j=i;
			for(int k=i+1;k<=n;k++)
			{
			if(a[k]<a[j])
			j=k;
			}
		  int t=a[i];
		   a[i]= a[j];
		   a[j]=t;
		}
	}


    }


------------------------------------------------------------------------------------------------------------

2) Sort a given set of n integer elements using Quick Sort method and compute its time
complexity. Run the program for varied values of n&gt;5000 and record the time taken to sort.
Plot a graph of the time taken versus n. The elements can be read from a file or can be
generated using the random number generator. Demonstrate using C++/Java how the
divide-and-conquer method works along with its time complexity analysis: worst case,
average case and best case.

---------------------------------------------------------------------------------------------------------------
Program:-

package quicksort;

import java.util.Scanner;
import java.util.Random;
import java.io.*;
public class QuickSort {
  static int size; // To read size of input elements 
    public static void main(String[] args) throws IOException{
       Scanner in = new Scanner(System.in);
 System.out.println("Enter the number of elements to sorted: ( >5000):");
 size = in.nextInt();
 //Declare an array of dimension 'size'
 int inputArr [] = new int[size];
 genRandomNumbers(inputArr);
 //Sort the randomly generated numbers for average case and best case complexity
 long startTime = System.nanoTime();
 quickSort(inputArr,0,size-1);
 long estimatedTime = System.nanoTime() - startTime;
 PrintWriter outA = new PrintWriter(new File("qsort.txt"));
 for(int i=0;i<inputArr.length;i++)
 {
 outA.println(inputArr[i]);
 }
 outA.close();
 System.out.println("The time complexity for best case and average case is " + (estimatedTime/1000000.0)+ " ms");

 //Sort the sorted numbers for worst case complexity
 startTime = System.nanoTime();
 quickSort(inputArr,0,size-1);
 estimatedTime = System.nanoTime() - startTime;
 System.out.println("The time complexity for worst case is " +
(estimatedTime/1000000.0)+ " ms");
 }
// Method to generate the Random Numbers
public static void genRandomNumbers(int inputArr[]) throws IOException
 {
 int number, count=0;
 Random rand = new Random();
 PrintWriter out = new PrintWriter(new File("Random.txt"));
 while(count<size)
 {
 number=rand.nextInt(size)+1;
 out.println(number);
 inputArr[count]=number;
 count++;
 }
 out.close();
 System.out.println("The total numbers generated: " + count );
 }
 //Method for QuickSort
 public static void quickSort(int a[],int low,int high)
 {
 int j;
 if(low<high)
 {
 j= partition(a,low,high);
 quickSort(a,low,j-1);
 quickSort(a,j+1,high);
 }
 }
 //Method for Partition
 public static int partition(int a[],int low,int high)
 {
 int i,j,temp,pivot;
 pivot = a[low];
 i = low + 1;
 j = high;

 while(true)
 {
 while(i<high && a[i]<=pivot)
 i++;
 while(a[j]>pivot)
 j--;
 if(i<j)
 {
 temp = a[i];
 a[i] = a[j];
 a[j] = temp;
 }
 else
 {
 temp = a[low];
 a[low] = a[j];
 a[j] = temp;
 return j;
 }
 }// End of While
 } // End of Main Method
} // End of class

-------------------------------------------------------------------------------------------------------------------

3) Sort a given set of n integer elements using Merge Sort method and compute its time
complexity. Run the program for varied values of n&gt;5000 and record the time taken to sort.
Plot a graph of the time taken versus n. The elements can be read from a file or can be
generated using the random number generator. Demonstrate using C++/Java how the
divide-and-conquer method works along with its time complexity analysis: worst case,
average case and best case.

----------------------------------------------------------------------------------------------------------------------

Program:-
package mergesort;
import java.util.Scanner;
import java.util.Random;
import java.io.*;

/**
 *
 * @author 
 */
public class MergeSort {

    /**
     * @param args the command line arguments
     */
    static int size; // To read size of input elements

    public static void main(String[] args) throws IOException {
        // TODO code application logic here
        Scanner in = new Scanner(System.in);
 System.out.println("Enter the number of elements to sorted: (>5000):");
 size = in.nextInt();
 //Declare an array of dimension 'size'
 int inputArr [] = new int[size];
 genRandomNumbers(inputArr);
 //Sort the randomly generated numbers for best case, average case and worst case complexity
 long startTime = System.nanoTime();
 mergeSort(inputArr,0,size-1);
 long estimatedTime = System.nanoTime() - startTime;
 PrintWriter outA = new PrintWriter(new File("msort.txt"));
 for(int i=0;i<inputArr.length;i++)
 {
 outA.println(inputArr[i]);
 }
 outA.close();
 System.out.println("The time complexity for best,average and worst case is " + (estimatedTime/1000000.0)+ " ms");
 }
 // Method for random number generation
 public static void genRandomNumbers(int inputArr[]) throws IOException
 {
 int number, count=0;
 Random rand = new Random();
 PrintWriter out = new PrintWriter(new File("Mrandom.txt"));
 while(count<size)
 {
 number=rand.nextInt(size)+1;
 out.println(number);
 out.print(" ");
 inputArr[count]=number;
 count++;
 }
 out.close();
 System.out.println("The total numbers generated: " + count );
 }

 public static void merge(int a[],int low,int mid,int high)
 {
int i = low;
int j = mid+1;
int k = low;
int c [] = new int[1000000];
while(i<=mid && j<=high)
{
 if(a[i] < a[j])
 {
c[k] = a[i];
i = i+1;
k = k+1;
 }
 else
 {
c[k] = a[j];
j = j+1;
k = k+1;
 }
}
while(i<=mid)
{
 c[k++] = a[i++];
}
while(j<=high)
{
 c[k++] = a[j++];
}
for(i=low;i<=high;i++)
{
a[i] = c[i];
}
 }

public static void mergeSort(int a[],int low,int high)
 {
 int mid;
 if(low<high)
 {
 mid = (low+high)/2;
 mergeSort(a,low,mid);
 mergeSort(a,mid+1,high);
 merge(a,low,mid,high);
 }
 }
}

-------------------------------------------------------------------------------------------------------------------

4) To solve Knapsack problem using Greedy method

-------------------------------------------------------------------------------------------------------------------


package knapsackgreedy;
import java.util.Scanner;

/**
 *
 * @author 
 */
public class KnapsackGreedy {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int nItems;
 Scanner in = new Scanner(System.in);
 System.out.println("Enter the number of items: ");
 nItems = in.nextInt();
 double W; 
 double weight[] = new double[nItems]; 
 double value[] = new double[nItems]; 
 double ratio[] = new double[nItems]; 

 System.out.println("Enter the weights of the item");
 for (int i = 0; i<nItems; i++)
 weight[i] = in.nextDouble();
 System.out.println("Enter the values/profits of the item");
 for (int i = 0; i<nItems; i++)
 value[i] = in.nextDouble();
 for (int i = 0; i<nItems; i++)
 ratio[i] = value[i] / weight[i];
 System.out.println("Enter the Capacity of the knapsack: ");
 W = in.nextDouble();

 System.out.println("\n The maximum value in a knapsack of capacity " + W+ " is: "+
 computeMaxValue(W,weight,value,ratio));
 }

 public static double computeMaxValue(double W,double weight[],double
value[],double ratio[])
 {
 double cW = 0; //current weight
 double cV = 0; //current value
 System.out.print("\n Items considered are: ");
 while (cW<W)
 {
 int item = getNextItem(weight,value,ratio);
// getnext highest ratio
 if (item == -1)
 {
 //No items left
 break;
 }
 System.out.print((item+1)+" ");
 if (cW + weight[item] <= W)
 {
 cW += weight[item];
 cV += value[item];
 //mark as used for the getNext() (ratio) function
 ratio[item] = 0;
 }
 else 
     {
 cV += (ratio[item] * (W - cW));
// Break the value and add
 cW += (W - cW);
 break; //the knapsack is full
 }
}
return cV;
}
 //Method to get the next highest ratio
 public static int getNextItem(double weight[],double value[],double ratio[])
 {
 double highest = 0;
 int index = -1;
 for (int i = 0; i<value.length; i++)
 {
 if (ratio[i] >highest)
 {
 highest = ratio[i];
 index = i;
 }
 }
 return index;
 
    }
    
}




---------------------------------------------------------------------------------------------------------------------

6) To find Minimum Cost Spanning Tree of a given connected undirected graph using Kruskal’s
algorithm. Use Union-Find algorithms in your program.

---------------------------------------------------------------------------------------------------------------------


package kruskals;
import java.util.*;

/**
 *
 * @author Dell
 */
public class Kruskals {

    /**
     * @param args the command line arguments
     */
    static int parent[];
    static int cost[][];
    public static void main(String[] args) {
        // TODO code application logic here
        int i,j,n,min,ne=1;
 int u=0,v=0,a=0,b=0,mincost=0;

 /* Scanner class to read values from console */
 Scanner in = new Scanner(System.in);

 System.out.println("Enter the number of vertices/nodes in the graph");
 n = in.nextInt();

 cost = new int[n+1][n+1];
 parent= new int[n+1];


 System.out.println("Enter the Cost/Weight matrix");
 for(i=1;i<=n;i++)
 {
 parent[i]=0;
 for(j=1;j<=n;j++)
 {
 cost[i][j] = in.nextInt();
 if(cost[i][j]==0)
 cost[i][j]=999;
 }
 }
 System.out.println("The edges of Minimum spanning tree are:");
 while(ne<n)
 {
 min = 999;
 for(i=1;i<=n;i++)
 {
 for(j=1;j<=n;j++)
 {
 if(cost[i][j]<min)
 {
 min = cost[i][j];
 a = u = i;
 b = v = j;
 }
 }
 }
 u = findParent(u);
 v = findParent(v);

 if(union(u,v)==1)
{
 System.out.println(ne++ + " Edge Selected (" + a +" --- "+ b + ") Cost=" + min);
 mincost += min;
 }
 cost[a][b] = cost[b][a] = 999;
 }
 System.out.println("Minimum cost " + mincost);
}
/* To find the parent of particular vertex */
public static int findParent(int i)
{
 while(parent[i]!=0)
 {
 i = parent[i];
 }
 return i;
}
/* To determine the cycle in the graph formed by selection of
particular edge */
public static int union(int i,int j)
{
 if(i!=j)
 {
 parent[j]=i;
 return 1;
 }
 return 0;
}
}



--------------------------------------------------------------------------------------------------------------------

7) To find Minimum Cost Spanning Tree of a given connected undirected graph using Prim’s
algorithm.

---------------------------------------------------------------------------------------------------------------------

Program:-

package prims;
import java.util.*;

/**
 *
 * @author 
 */
public class Prims {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int i,j,k,n,source;
 int w[][] = new int[50][50];
 int visited [] = new int[20];
 int minWt,totalCost=0,ev=0,sv=0;

 Scanner in = new Scanner(System.in);
 System.out.println("Enter the no of vertices/nodes in the graph");
 n = in.nextInt();

 System.out.println("Enter the weight/cost matrix");
 for(i=1;i<=n;i++)
 {
 for(j=1;j<=n;j++)
 {
 w[i][j] = in.nextInt();
 }
 }
 System.out.println("Enter the source vertex to start");
 source = in.nextInt();

 for(i=1;i<=n;i++)
 visited[i] = 0;
 visited[source] = 1;
 System.out.println("Minimum Weight/cost edges selected for spanning tree are:");
 for(i=1;i<n;i++)
 {
 minWt = 999;
 for(j=1;j<=n;j++)
 {
 if(visited[j] == 1)
 {
 for(k=1;k<=n;k++)
 {
 if( visited[k]!= 1 && w[j][k] < minWt)
 {
 sv = j;
 ev = k;
 minWt = w[j][k];

 }
 }
 }
 }
 totalCost += minWt;
 visited[ev] = 1;
 System.out.println(sv+ " " + "--->" + " "+ ev + " " + "Cost:"+" "+ minWt);
 }
 

 System.out.println("The total cost of minimum spanning tree is "+totalCost);

    }
    
}



----------------------------------------------------------------------------------------------------------------------


10) Solve 0/1 Knapsack problem using Dynamic Programming method

-----------------------------------------------------------------------------------------------------------------------



package knapsackdp;
import java.util.Scanner;
/**
 *
 * @author 
 */
public class KnapSackDP {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int i;
 int n; // No of items
 int W; // Capacity of the knapSack
 int wt[] = new int[10]; // Weights of 'n' items
 int val[] = new int[10]; // Values of 'n' items

 Scanner in = new Scanner(System.in);
 System.out.println("Enter the no of items");
 n = in.nextInt();

 System.out.println("Enter the weight of the items");
 for(i=1;i<=n;i++)
 {
 wt[i] = in.nextInt();
 }

 System.out.println("Enter the value of the items");
 for(i=1;i<=n;i++)
 {
 val[i] = in.nextInt();
 }

 System.out.println("Enter the capacity of the knapsack");
 W = in.nextInt();

 System.out.println("The maximum value in knapsack of capacity " + W +
" is: "+knapSack(W, wt, val, n));
}
// Returns the maximum value that can be put in a knapsack of capacity W
public static int knapSack(int W, int wt[], int val[], int n)
{
int i, j;
int v[][] = new int[n+1][W+1];
// Build table v[][] in bottom up manner
for (i = 0; i <= n; i++)
{
 // j is the temporary capacity of knapsack during table building
 for (j = 0; j <= W; j++)
 {
if (i==0 || j==0)
 v[i][j] = 0;
else if (j-wt[i]<0)
 v[i][j] = v[i-1][j];
else
 v[i][j] = max(v[i-1][j],val[i] + v[i-1][j-wt[i]]);
 }
}
return v[n][W];
 }
 public static int max(int a, int b)
 {
 return (a > b)? a : b; 
    }
    
}


---------------------------------------------------------------------------------------------------------------------

11. Design and implement in Java to find a subset of a given set S = {Sl, S2,. ...,Sn} of n
positive integers whose SUM is equal to a given positive integer d. For example, if S ={1, 2, 5,
6, 8} and d= 9, there are two solutions {1,2,6}and {1,8}. Display a suitable message, if the
given problem instance doesn&#39;t have a solution.

---------------------------------------------------------------------------------------------------------------------


package subset;
import java.util.Scanner;
public class Subset {
    static int x[] = new int[20];
    static int s[] = new int[20];
    static int d,flag=0;
    public static void main(String[] args) {
        // TODO code application logic here
        int i,n,sum=0;
 Scanner in = new Scanner(System.in);
 System.out.println("Enter the no of elements");
 n = in.nextInt();
 System.out.println("Enter the elements");
 for(i=1;i<=n;i++)
 s[i] = in.nextInt();
 System.out.println("Enter the value of d:");
 d = in.nextInt();
 for(i=1;i<=n;i++) {
 sum = sum + s[i];
 }
 // Check for the problem instance not having the solution
 if(sum<d || s[1]>d) {
 System.out.println("The given problem instance does not
have a solution");
 System.exit(0);
 }
 else{
 System.out.println("Subsets are:");
 SumofSub(0,1,sum);
 }
 if(flag ==0)
 {
 System.out.println("No subset possible");
 System.exit(0);
 } }
 // Method to Calculate the Subset Sum
 public static void SumofSub(int m,int k,int r)
 {
 int i;
 x[k] = 1;
 if(m+s[k] == d)
 {
 flag =1;
 System.out.print("{");
 for(i=1;i<=k;i++) {
     if(x[i] == 1)
 System.out.print(s[i] + " ");
 }
 System.out.print("}\n");
 }
 else if((m+s[k]+s[k+1])<= d)
 SumofSub(m+s[k],k+1,r-s[k]);
 if((m+r-s[k]>=d) && (m+s[k+1]<=d)) {
 x[k]=0;
 SumofSub(m,k+1,r-s[k]);
 }
 }
}



